// Aggiungi queste funzioni al file apiService.js

// Funzione per ottenere il profilo dell'utente
export const getUserProfile = async () => {
  try {
    const token = await getAuthToken();
    
    const response = await fetch(`${API_BASE_URL}/users/profile`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, data };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante il recupero del profilo:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per modificare il profilo dell'utente
export const updateUserProfile = async (profileData) => {
  try {
    const token = await getAuthToken();
    
    const response = await fetch(`${API_BASE_URL}/users/profile`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(profileData),
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, data };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante l\'aggiornamento del profilo:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per registrare un nuovo utente
export const registerUser = async (userData) => {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });
    
    const data = await response.json();
    
    if (response.ok) {
      // Memorizza il token di autenticazione
      await AsyncStorage.setItem('userToken', data.token);
      return { success: true, data };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante la registrazione:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per ottenere statistiche generali
export const getDashboardStats = async () => {
  try {
    const token = await getAuthToken();
    
    const response = await fetch(`${API_BASE_URL}/stats/dashboard`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, stats: data };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante il recupero delle statistiche:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per creare una nuova campagna
export const createCampaign = async (campaignData) => {
  try {
    const token = await getAuthToken();
    
    const response = await fetch(`${API_BASE_URL}/campaigns/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(campaignData),
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, campaignId: data.campaignId };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante la creazione della campagna:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per recuperare la password
export const requestPasswordReset = async (email) => {
  try {
    const response = await fetch(`${API_BASE_URL}/auth/reset-password`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email }),
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, message: data.message };
    } else {
      return { success: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante la richiesta di reset password:', error);
    return { success: false, error: 'Errore di connessione' };
  }
};

// Funzione per validare il token
export const validateToken = async () => {
  try {
    const token = await getAuthToken();
    
    const response = await fetch(`${API_BASE_URL}/auth/validate`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });
    
    const data = await response.json();
    
    if (response.ok) {
      return { success: true, valid: true };
    } else {
      // Rimuovi il token non valido
      await AsyncStorage.removeItem('userToken');
      return { success: false, valid: false, error: data.message };
    }
  } catch (error) {
    console.error('Errore durante la validazione del token:', error);
    return { success: false, valid: false, error: 'Errore di connessione' };
  }
};
