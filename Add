// ProfileScreen.js - Schermata del profilo utente ottimizzata

import React, { useState, useEffect, useCallback } from 'react';
import {
  StyleSheet,
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  Switch,
  ActivityIndicator,
  Alert,
  SafeAreaView,
  StatusBar
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';

// Componenti separati per migliorare la leggibilità e riutilizzo
const ProfileHeader = ({ profileData }) => (
  <View style={styles.profileHeader}>
    <Image 
      source={{ uri: profileData.profilePicture }}
      style={styles.profileImage}
    />
    
    <View style={styles.profileInfo}>
      <Text style={styles.profileName}>
        {profileData.fullName}
        {profileData.isVerified && (
          <Ionicons name="checkmark-circle" size={16} color="#0288D1" />
        )}
      </Text>
      <Text style={styles.profileUsername}>@{profileData.username}</Text>
      <Text style={styles.profileEmail}>{profileData.email}</Text>
      <View style={styles.accountTypeBadge}>
        <Text style={styles.accountTypeText}>{profileData.accountType}</Text>
      </View>
    </View>
  </View>
);

const StatsCard = ({ stats }) => (
  <View style={styles.statsContainer}>
    <View style={styles.statItem}>
      <Text style={styles.statValue}>{stats.totalCampaigns}</Text>
      <Text style={styles.statLabel}>Campagne</Text>
    </View>
    
    <View style={styles.statDivider} />
    
    <View style={styles.statItem}>
      <Text style={styles.statValue}>{stats.totalMessages}</Text>
      <Text style={styles.statLabel}>Messaggi</Text>
    </View>
    
    <View style={styles.statDivider} />
    
    <View style={styles.statItem}>
      <Text style={styles.statValue}>{stats.responseRate}%</Text>
      <Text style={styles.statLabel}>Risposte</Text>
    </View>
  </View>
);

const SubscriptionCard = ({ subscription }) => (
  <View style={styles.subscriptionCard}>
    <View style={styles.subscriptionHeader}>
      <Text style={styles.subscriptionTitle}>Piano attivo</Text>
      <View style={styles.subscriptionBadge}>
        <Text style={styles.subscriptionBadgeText}>{subscription}</Text>
      </View>
    </View>
    
    <View style={styles.subscriptionFeatures}>
      {['Messaggi illimitati', 'Filtri avanzati', 'Analisi dettagliate', 'Supporto prioritario'].map((feature, index) => (
        <View key={index} style={styles.featureItem}>
          <Ionicons name="checkmark-circle" size={20} color="#4CAF50" />
          <Text style={styles.featureText}>{feature}</Text>
        </View>
      ))}
    </View>
    
    <TouchableOpacity style={styles.subscriptionButton}>
      <Text style={styles.subscriptionButtonText}>Gestisci Abbonamento</Text>
    </TouchableOpacity>
  </View>
);

const SettingItem = ({ icon, label, hasSwitch, switchValue, onToggle, onPress }) => (
  <TouchableOpacity style={styles.settingItem} onPress={onPress}>
    <View style={styles.settingIconContainer}>
      <Ionicons name={icon} size={20} color="#0288D1" />
    </View>
    <Text style={styles.settingLabel}>{label}</Text>
    {hasSwitch ? (
      <View style={styles.switchContainer}>
        <Switch
          value={switchValue}
          onValueChange={onToggle}
          trackColor={{ false: '#D1D1D1', true: '#AEDCF0' }}
          thumbColor={switchValue ? '#0288D1' : '#F4F4F4'}
        />
      </View>
    ) : (
      <Ionicons name="chevron-forward" size={20} color="#666" />
    )}
  </TouchableOpacity>
);

const ProfileScreen = ({ navigation }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [profileData, setProfileData] = useState(null);
  const [activeNotifications, setActiveNotifications] = useState(true);
  
  // Utilizzo di useCallback per memorizzare funzioni tra i rendering
  const fetchProfileData = useCallback(async () => {
    try {
      setIsLoading(true);
      
      // Simulazione caricamento dati profilo da API
      // In un'app reale, qui dovrebbe esserci una chiamata API
      const mockData = {
        username: 'marketing_pro',
        fullName: 'Marketing Professional',
        email: 'marketing@example.com',
        profilePicture: 'https://via.placeholder.com/150',
        accountType: 'Business',
        isVerified: true,
        stats: {
          totalCampaigns: 24,
          totalMessages: 1250,
          responseRate: 38,
          activeSubscription: 'Premium'
        }
      };
      
      // Simula il tempo di risposta del server
      setTimeout(() => {
        setProfileData(mockData);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Errore nel caricamento del profilo:', error);
      Alert.alert('Errore', 'Impossibile caricare i dati del profilo');
      setIsLoading(false);
    }
  }, []);
  
  useEffect(() => {
    fetchProfileData();
    
    // Aggiungiamo un listener per ricaricare i dati quando lo schermo diventa attivo
    const unsubscribe = navigation.addListener('focus', () => {
      fetchProfileData();
    });
    
    // Pulizia al momento dello smontaggio
    return unsubscribe;
  }, [navigation, fetchProfileData]);
  
  const handleLogout = useCallback(() => {
    Alert.alert(
      'Conferma Logout',
      'Sei sicuro di voler effettuare il logout?',
      [
        { text: 'Annulla', style: 'cancel' },
        { 
          text: 'Logout', 
          style: 'destructive',
          onPress: async () => {
            try {
              await AsyncStorage.removeItem('userToken');
              navigation.reset({
                index: 0,
                routes: [{ name: 'Login' }],
              });
            } catch (error) {
              console.error('Errore durante il logout:', error);
              Alert.alert('Errore', 'Impossibile completare il logout');
            }
          }
        }
      ]
    );
  }, [navigation]);
  
  const navigateToSettings = useCallback((settingName) => {
    // Qui si può implementare la navigazione alle varie schermate delle impostazioni
    console.log(`Navigazione a ${settingName}`);
    // navigation.navigate(settingName);
  }, []);
  
  if (isLoading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <StatusBar barStyle="dark-content" backgroundColor="#F5F7FA" />
        <ActivityIndicator size="large" color="#0288D1" />
        <Text style={styles.loadingText}>Caricamento profilo...</Text>
      </SafeAreaView>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor="#F5F7FA" />
      <Text style={styles.headerTitle}>Il mio Profilo</Text>
      
      <ScrollView 
        style={styles.scrollContainer}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.scrollContent}
      >
        <ProfileHeader profileData={profileData} />
        <StatsCard stats={profileData.stats} />
        <SubscriptionCard subscription={profileData.stats.activeSubscription} />
        
        <View style={styles.settingsSection}>
          <Text style={styles.sectionTitle}>Impostazioni Account</Text>
          
          <SettingItem 
            icon="person" 
            label="Modifica Profilo" 
            onPress={() => navigateToSettings('EditProfile')} 
          />
          
          <SettingItem 
            icon="lock-closed" 
            label="Privacy e Sicurezza" 
            onPress={() => navigateToSettings('Privacy')} 
          />
          
          <SettingItem 
            icon="notifications" 
            label="Notifiche" 
            hasSwitch={true} 
            switchValue={activeNotifications} 
            onToggle={setActiveNotifications} 
          />
          
          <SettingItem 
            icon="help-circle" 
            label="Supporto e Assistenza" 
            onPress={() => navigateToSettings('Support')} 
          />
          
          <SettingItem 
            icon="document-text" 
            label="Termini e Condizioni" 
            onPress={() => navigateToSettings('Terms')} 
          />
        </View>
        
        <TouchableOpacity 
          style={styles.logoutButton}
          onPress={handleLogout}
          activeOpacity={0.7}
        >
          <Ionicons name="log-out" size={20} color="#E53935" />
          <Text style={styles.logoutText}>Logout</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F7FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5F7FA',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#555',
    fontWeight: '500',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    padding: 16,
    color: '#333',
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 24,
  },
  profileHeader: {
    flexDirection: 'row',
    padding: 16,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  profileImage: {
    width: 80,
    height: 80,
    borderRadius: 40,
  },
  profileInfo: {
    marginLeft: 16,
    flex: 1,
    justifyContent: 'center',
  },
  profileName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  profileUsername: {
    fontSize: 14,
    color: '#666',
    marginBottom: 2,
  },
  profileEmail: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  accountTypeBadge: {
    backgroundColor: '#E1F5FE',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
    alignSelf: 'flex-start',
  },
  accountTypeText: {
    color: '#0288D1',
    fontWeight: '600',
    fontSize: 12,
  },
  statsContainer: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
    justifyContent: 'space-between',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  statItem: {
    alignItems: 'center',
    flex: 1,
  },
  statValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  statDivider: {
    width: 1,
    backgroundColor: '#E0E0E0',
  },
  subscriptionCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  subscriptionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  subscriptionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  subscriptionBadge: {
    backgroundColor: '#EDE7F6',
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  subscriptionBadgeText: {
    color: '#673AB7',
    fontWeight: '600',
    fontSize: 12,
  },
  subscriptionFeatures: {
    marginBottom: 16,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  featureText: {
    marginLeft: 10,
    fontSize: 14,
    color: '#555',
  },
  subscriptionButton: {
    backgroundColor: '#0288D1',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
  },
  subscriptionButtonText: {
    color: '#FFFFFF',
    fontWeight: '600',
    fontSize: 14,
  },
  settingsSection: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 16,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 16,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  settingIconContainer: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#E1F5FE',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 16,
  },
  settingLabel: {
    flex: 1,
    fontSize: 15,
    color: '#333',
  },
  switchContainer: {
    alignItems: 'flex-end',
  },
  logoutButton: {
    flexDirection: 'row',
    backgroundColor: '#FFEBEE',
    borderRadius: 12,
    marginHorizontal: 16,
    marginBottom: 32,
    padding: 16,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logoutText: {
    color: '#E53935',
    fontWeight: '600',
    fontSize: 15,
    marginLeft: 8,
  }
});

export default ProfileScreen;
