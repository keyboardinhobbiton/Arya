// CampaignHistoryScreen.js - Schermata dello storico delle campagne

import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  FlatList,
  TouchableOpacity,
  ActivityIndicator,
  TextInput
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { getCampaignHistory } from '../services/apiService';

const CampaignHistoryScreen = ({ navigation }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [campaigns, setCampaigns] = useState([]);
  const [filteredCampaigns, setFilteredCampaigns] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState('all'); // 'all', 'completed', 'pending'

  useEffect(() => {
    const fetchCampaigns = async () => {
      try {
        setIsLoading(true);
        // Normalmente qui richiameremmo l'API
        // const response = await getCampaignHistory();
        
        // Mock dei dati per demo
        const mockCampaigns = [
          { 
            id: '1', 
            name: 'Campagna Influencer', 
            date: '15/04/2025', 
            status: 'completed',
            targetUsers: 50,
            messagesSent: 48,
            responses: 12
          },
          { 
            id: '2', 
            name: 'Lancio Prodotto', 
            date: '02/04/2025', 
            status: 'completed',
            targetUsers: 100,
            messagesSent: 100,
            responses: 35
          },
          { 
            id: '3', 
            name: 'Collaborazione Brand', 
            date: '22/03/2025', 
            status: 'completed',
            targetUsers: 30,
            messagesSent: 30,
            responses: 8
          },
          { 
            id: '4', 
            name: 'Sondaggio Feedback', 
            date: '10/03/2025', 
            status: 'completed',
            targetUsers: 200,
            messagesSent: 198,
            responses: 45
          },
          { 
            id: '5', 
            name: 'Evento Lancio', 
            date: '27/02/2025', 
            status: 'completed',
            targetUsers: 75,
            messagesSent: 75,
            responses: 22
          },
          { 
            id: '6', 
            name: 'Test Campagna', 
            date: '17/02/2025', 
            status: 'pending',
            targetUsers: 20,
            messagesSent: 15,
            responses: 3
          },
        ];
        
        setCampaigns(mockCampaigns);
        setFilteredCampaigns(mockCampaigns);
      } catch (error) {
        console.error('Errore nel recupero campagne:', error);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchCampaigns();
  }, []);
  
  useEffect(() => {
    // Applica i filtri quando cambiano search o filterType
    const applyFilters = () => {
      let filtered = [...campaigns];
      
      // Filtra per tipo (stato)
      if (filterType !== 'all') {
        filtered = filtered.filter(camp => camp.status === filterType);
      }
      
      // Filtra per ricerca testo
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        filtered = filtered.filter(camp => 
          camp.name.toLowerCase().includes(query) || 
          camp.date.toLowerCase().includes(query)
        );
      }
      
      setFilteredCampaigns(filtered);
    };
    
    applyFilters();
  }, [searchQuery, filterType, campaigns]);

  const renderCampaignItem = ({ item }) => (
    <TouchableOpacity 
      style={styles.campaignItem}
      onPress={() => navigation.navigate('CampaignDetail', { campaign: item })}
    >
      <View style={styles.campaignHeader}>
        <Text style={styles.campaignName}>{item.name}</Text>
        <View style={[
          styles.statusIndicator, 
          { backgroundColor: item.status === 'completed' ? '#4CAF50' : '#FF9800' }
        ]} />
      </View>
      
      <Text style={styles.campaignDate}>
        <Ionicons name="calendar-outline" size={14} color="#666" /> {item.date}
      </Text>
      
      <View style={styles.campaignStats}>
        <View style={styles.statItem}>
          <Ionicons name="people-outline" size={16} color="#666" />
          <Text style={styles.statText}>{item.targetUsers}</Text>
        </View>
        
        <View style={styles.statItem}>
          <Ionicons name="mail-outline" size={16} color="#666" />
          <Text style={styles.statText}>{item.messagesSent}</Text>
        </View>
        
        <View style={styles.statItem}>
          <Ionicons name="chatbubble-outline" size={16} color="#666" />
          <Text style={styles.statText}>{item.responses}</Text>
        </View>
      </View>
      
      <View style={styles.responseRate}>
        <Text style={styles.responseRateLabel}>Tasso di risposta:</Text>
        <Text style={styles.responseRateValue}>
          {Math.round((item.responses / item.messagesSent) * 100)}%
        </Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.headerTitle}>Storico Campagne</Text>
      
      <View style={styles.searchContainer}>
        <Ionicons name="search" size={20} color="#666" style={styles.searchIcon} />
        <TextInput
          style={styles.searchInput}
          placeholder="Cerca campagne..."
          value={searchQuery}
          onChangeText={setSearchQuery}
        />
      </View>
      
      <View style={styles.filterTabs}>
        <TouchableOpacity 
          style={[
            styles.filterTab, 
            filterType === 'all' && styles.activeFilterTab
          ]}
          onPress={() => setFilterType('all')}
        >
          <Text style={[
            styles.filterTabText,
            filterType === 'all' && styles.activeFilterTabText
          ]}>
            Tutte
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={[
            styles.filterTab, 
            filterType === 'completed' && styles.activeFilterTab
          ]}
          onPress={() => setFilterType('completed')}
        >
          <Text style={[
            styles.filterTabText,
            filterType === 'completed' && styles.activeFilterTabText
          ]}>
            Completate
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={[
            styles.filterTab, 
            filterType === 'pending' && styles.activeFilterTab
          ]}
          onPress={() => setFilterType('pending')}
        >
          <Text style={[
            styles.filterTabText,
            filterType === 'pending' && styles.activeFilterTabText
          ]}>
            In corso
          </Text>
        </TouchableOpacity>
      </View>
      
      {isLoading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0288D1" />
          <Text style={styles.loadingText}>Caricamento campagne...</Text>
        </View>
      ) : (
        <>
          {filteredCampaigns.length > 0 ? (
            <FlatList
              data={filteredCampaigns}
              keyExtractor={item => item.id}
              renderItem={renderCampaignItem}
              contentContainerStyle={styles.listContainer}
            />
          ) : (
            <View style={styles.emptyContainer}>
              <Ionicons name="document-text-outline" size={60} color="#bdbdbd" />
              <Text style={styles.emptyText}>Nessuna campagna trovata</Text>
              <Text style={styles.emptySubtext}>
                Modifica i filtri o crea una nuova campagna
              </Text>
            </View>
          )}
        </>
      )}
      
      <TouchableOpacity 
        style={styles.newCampaignButton}
        onPress={() => navigation.navigate('FilterUsers')}
      >
        <Ionicons name="add" size={24} color="#fff" />
        <Text style={styles.newCampaignButtonText}>Nuova Campagna</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f9f9f9',
    paddingTop: 50,
    paddingHorizontal: 20,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 8,
    paddingHorizontal: 12,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  searchIcon: {
    marginRight: 10,
  },
  searchInput: {
    flex: 1,
    height: 45,
    fontSize: 16,
  },
  filterTabs: {
    flexDirection: 'row',
    marginBottom: 15,
  },
  filterTab: {
    flex: 1,
    paddingVertical: 10,
    alignItems: 'center',
    borderBottomWidth: 2,
    borderBottomColor: 'transparent',
  },
  activeFilterTab: {
    borderBottomColor: '#0288D1',
  },
  filterTabText: {
    fontSize: 14,
    color: '#666',
  },
  activeFilterTabText: {
    fontWeight: 'bold',
    color: '#0288D1',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  listContainer: {
    paddingBottom: 80,
  },
  campaignItem: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 15,
    marginBottom: 15,
    elevation: 1,
    borderWidth: 1,
    borderColor: '#e0e0e0',
  },
  campaignHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 5,
  },
  campaignName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  campaignDate: {
    fontSize: 12,
    color: '#666',
    marginBottom: 10,
  },
  campaignStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 10,
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderColor: '#e0e0e0',
    marginBottom: 10,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statText: {
    marginLeft: 5,
    fontSize: 14,
    color: '#333',
  },
  responseRate: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  responseRateLabel: {
    fontSize: 12,
    color: '#666',
  },
  responseRateValue: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#0288D1',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#666',
    marginTop: 10,
  },
  emptySubtext: {
    fontSize: 14,
    color: '#666',
    marginTop: 5,
    textAlign: 'center',
  },
  newCampaignButton: {
    flexDirection: 'row',
    position: 'absolute',
    bottom: 20,
    right: 20,
    left: 20,
    backgroundColor: '#0288D1',
    borderRadius: 8,
    height: 50,    
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 3,
  },
  newCampaignButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
});

export default CampaignHistoryScreen;
