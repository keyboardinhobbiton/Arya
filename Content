import React, { createContext, useContext, useReducer, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as apiService from './apiService';

// Stato iniziale dell'applicazione
const initialState = {
  user: null,
  isLoading: true,
  isAuthenticated: false,
  currentCampaign: null,
  campaigns: [],
  selectedUsers: [],
  filters: {
    minFollowers: '1000',
    maxFollowers: '',
    minViews: '500',
    avgEngagement: '5',
    isVerified: false
  },
  error: null
};

// Tipi di azioni
const ActionTypes = {
  SET_USER: 'SET_USER',
  SET_LOADING: 'SET_LOADING',
  SET_AUTHENTICATED: 'SET_AUTHENTICATED',
  SET_CURRENT_CAMPAIGN: 'SET_CURRENT_CAMPAIGN',
  SET_CAMPAIGNS: 'SET_CAMPAIGNS',
  SET_SELECTED_USERS: 'SET_SELECTED_USERS',
  SET_FILTERS: 'SET_FILTERS',
  SET_ERROR: 'SET_ERROR',
  LOGOUT: 'LOGOUT'
};

// Reducer per gestire le azioni
const appReducer = (state, action) => {
  switch (action.type) {
    case ActionTypes.SET_USER:
      return { ...state, user: action.payload };
    case ActionTypes.SET_LOADING:
      return { ...state, isLoading: action.payload };
    case ActionTypes.SET_AUTHENTICATED:
      return { ...state, isAuthenticated: action.payload };
    case ActionTypes.SET_CURRENT_CAMPAIGN:
      return { ...state, currentCampaign: action.payload };
    case ActionTypes.SET_CAMPAIGNS:
      return { ...state, campaigns: action.payload };
    case ActionTypes.SET_SELECTED_USERS:
      return { ...state, selectedUsers: action.payload };
    case ActionTypes.SET_FILTERS:
      return { ...state, filters: { ...state.filters, ...action.payload } };
    case ActionTypes.SET_ERROR:
      return { ...state, error: action.payload };
    case ActionTypes.LOGOUT:
      return { ...initialState, isLoading: false };
    default:
      return state;
  }
};

// Creazione del contesto
const AppContext = createContext();

// Provider del contesto
export const AppProvider = ({ children }) => {
  const [state, dispatch] = useReducer(appReducer, initialState);

  // Controlla se l'utente Ã¨ autenticato all'avvio dell'app
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const token = await AsyncStorage.getItem('userToken');
        if (token) {
          // Recupera i dati dell'utente
          const userProfile = await apiService.getUserProfile();
          if (userProfile.success) {
            dispatch({ type: ActionTypes.SET_USER, payload: userProfile.data });
            dispatch({ type: ActionTypes.SET_AUTHENTICATED, payload: true });
            
            // Recupera le campagne
            const campaignsResult = await apiService.getCampaignHistory();
            if (campaignsResult.success) {
              dispatch({ type: ActionTypes.SET_CAMPAIGNS, payload: campaignsResult.campaigns });
            }
          } else {
            // Token non valido
            await AsyncStorage.removeItem('userToken');
          }
        }
        dispatch({ type: ActionTypes.SET_LOADING, payload: false });
      } catch (error) {
        console.error('Errore durante il controllo dell'autenticazione:', error);
        dispatch({ type: ActionTypes.SET_LOADING, payload: false });
      }
    };

    checkAuth();
  }, []);

  // Azioni disponibili
  const loginUser = async (username, password) => {
    dispatch({ type: ActionTypes.SET_LOADING, payload: true });
    try {
      const result = await apiService.loginUser(username, password);
      if (result.success) {
        dispatch({ type: ActionTypes.SET_USER, payload: result.data.user });
        dispatch({ type: ActionTypes.SET_AUTHENTICATED, payload: true });
        
        // Recupera le campagne dopo il login
        const campaignsResult = await apiService.getCampaignHistory();
        if (campaignsResult.success) {
          dispatch({ type: ActionTypes.SET_CAMPAIGNS, payload: campaignsResult.campaigns });
        }
      } else {
        dispatch({ type: ActionTypes.SET_ERROR, payload: result.error });
      }
    } catch (error) {
      dispatch({ type: ActionTypes.SET_ERROR, payload: 'Errore di connessione' });
    } finally {
      dispatch({ type: ActionTypes.SET_LOADING, payload: false });
    }
  };

  const logoutUser = async () => {
    try {
      await AsyncStorage.removeItem('userToken');
      dispatch({ type: ActionTypes.LOGOUT });
    } catch (error) {
      console.error('Errore durante il logout:', error);
    }
  };

  const searchUsers = async (filters) => {
    dispatch({ type: ActionTypes.SET_LOADING, payload: true });
    try {
      const result = await apiService.searchUsers(filters);
      if (result.success) {
        dispatch({ type: ActionTypes.SET_SELECTED_USERS, payload: result.users });
        dispatch({ type: ActionTypes.SET_FILTERS, payload: filters });
      } else {
        dispatch({ type: ActionTypes.SET_ERROR, payload: result.error });
      }
    } catch (error) {
      dispatch({ type: ActionTypes.SET_ERROR, payload: 'Errore di connessione' });
    } finally {
      dispatch({ type: ActionTypes.SET_LOADING, payload: false });
    }
  };

  const sendMessages = async (users, message) => {
    dispatch({ type: ActionTypes.SET_LOADING, payload: true });
    try {
      const result = await apiService.sendDirectMessages(users, message);
      if (result.success) {
        const campaign = {
          id: result.messageId,
          name: 'Nuova campagna',
          date: new Date().toLocaleDateString('it-IT'),
          targetUsers: users.length,
          messagesSent: result.sent,
          responses: 0,
          message: message
        };
        
        // Aggiorna la campagna corrente
        dispatch({ type: ActionTypes.SET_CURRENT_CAMPAIGN, payload: campaign });
        
        // Aggiorna l'elenco campagne
        dispatch({ 
          type: ActionTypes.SET_CAMPAIGNS, 
          payload: [campaign, ...state.campaigns] 
        });
        
        return { success: true, campaignId: result.messageId };
      } else {
        dispatch({ type: ActionTypes.SET_ERROR, payload: result.error });
        return { success: false, error: result.error };
      }
    } catch (error) {
      const errorMsg = 'Errore durante l\'invio dei messaggi';
      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMsg });
      return { success: false, error: errorMsg };
    } finally {
      dispatch({ type: ActionTypes.SET_LOADING, payload: false });
    }
  };

  const getCampaignDetails = async (campaignId) => {
    dispatch({ type: ActionTypes.SET_LOADING, payload: true });
    try {
      const result = await apiService.getCampaignDetails(campaignId);
      if (result.success) {
        dispatch({ type: ActionTypes.SET_CURRENT_CAMPAIGN, payload: result.details });
        return { success: true };
      } else {
        dispatch({ type: ActionTypes.SET_ERROR, payload: result.error });
        return { success: false, error: result.error };
      }
    } catch (error) {
      const errorMsg = 'Errore durante il recupero dei dettagli della campagna';
      dispatch({ type: ActionTypes.SET_ERROR, payload: errorMsg });
      return { success: false, error: errorMsg };
    } finally {
      dispatch({ type: ActionTypes.SET_LOADING, payload: false });
    }
  };

  // Reset dell'errore
  const clearError = () => {
    dispatch({ type: ActionTypes.SET_ERROR, payload: null });
  };

  return (
    <AppContext.Provider
      value={{
        ...state,
        loginUser,
        logoutUser,
        searchUsers,
        sendMessages,
        getCampaignDetails,
        clearError
      }}
    >
      {children}
    </AppContext.Provider>
  );
};

// Hook personalizzato per utilizzare il contesto
export const useAppContext = () => useContext(AppContext);
